import * as Tone from "tone";

import { getChordProgression } from "./ChordProgression";
import { getRhythmPattern, convertRhythmPattern } from "./RhythmPattern";
import { getMelodyFromNickname } from "./MelodyGenerator";

// üé∂ Ïò§Î•¥Í≥® ÏùåÏïÖ ÏÉùÏÑ±
export function generateOrgelMelody(color, zodiacSign, nickname) {
    const chords = getChordProgression(color);
    const rhythmPattern = getRhythmPattern(zodiacSign);
    const rhythmDurations = convertRhythmPattern(rhythmPattern);
    const melodyNotes = getMelodyFromNickname(nickname);

    let melody = [];
    for (let measure = 0; measure < 8; measure++) {
        let chordNotes = chords[measure].split("-"); // Ïòà: "C-Am" ‚Üí ["C", "Am"]
        let noteIndex = 0;

        for (let beat = 0; beat < 2; beat++) { // 6/8 ‚Üí 2ÎπÑÌä∏
            let durations = rhythmDurations[beat];

            durations.forEach((duration) => {
                let note = melodyNotes[noteIndex % melodyNotes.length];
                melody.push({ time: `0:${measure}:${beat}`, note, duration });
                noteIndex++;
            });
        }
    }
    return melody;
}

// üéµ Tone.jsÎ°ú Î©úÎ°úÎîî Ïû¨ÏÉù (UI Ï∞®Îã® Î¨∏Ï†ú Ìï¥Í≤∞)
export async function playMelody(melody, setNotesOnScreen) {
    if (!melody || melody.length === 0) {
        alert("Ïû¨ÏÉùÌï† Î©úÎ°úÎîîÍ∞Ä ÏóÜÏäµÎãàÎã§!");
        return;
    }

    // üîπ Tone.js Transport Ï¥àÍ∏∞Ìôî Î∞è Ïò§ÎîîÏò§ Ïª®ÌÖçÏä§Ìä∏ ÌôúÏÑ±Ìôî
    await Tone.start(); // üöÄ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ïò§ÎîîÏò§ Ïã§ÌñâÏùÑ ÎßâÏßÄ ÏïäÎèÑÎ°ù Î≥¥Ïû•
    Tone.Transport.stop();
    Tone.Transport.cancel();
    Tone.context.resume(); // üöÄ UI Ïù¥Î≤§Ìä∏ Ï∞®Îã® Î∞©ÏßÄ

    const synth = new Tone.Synth().toDestination();
    setNotesOnScreen([]); // Í∏∞Ï°¥ ÏùåÌëú Ï¥àÍ∏∞Ìôî

    melody.forEach(({ time, note, duration }) => {
        Tone.Transport.schedule((t) => {
            if (!t) return;
            
            synth.triggerAttackRelease(note, duration, t);

            // üîπ ÏùåÌëú ÌôîÎ©¥Ïóê ÌëúÏãú
            const noteSymbol = "‚ô™";
            const xPosition = Math.random() * 80 + 10; // 10%~90% Î≤îÏúÑÏóêÏÑú ÎûúÎç§ ÏúÑÏπò
            const durationInSec = 2; // 2Ï¥à ÎèôÏïà Ïò¨ÎùºÍ∞ÄÍ≤å ÏÑ§Ï†ï

            setNotesOnScreen((prevNotes) => [
                ...prevNotes,
                { symbol: noteSymbol, x: `${xPosition}%`, duration: durationInSec },
            ]);
        }, time);
    });

    Tone.Transport.start();
}